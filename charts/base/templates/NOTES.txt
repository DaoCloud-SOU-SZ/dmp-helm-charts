Tip:

  Watch the deployment status using the command: kubectl get pods -w --namespace {{ .Release.Namespace }}


1. Mysql  can be accessed on the following DNS names from within your cluster:
    {{ printf "%s-mysql.%s.svc.%s" .Release.Name .Release.Namespace .Values.mysql.clusterDomain }} for read/write operations (port {{ .Values.mysql.primary.service.port }})

    Administrator credentials:

    echo Username: root
    echo Password : $(kubectl get secret --namespace {{ .Release.Namespace }} {{ .Release.Name }}-mysql -o jsonpath="{.data.mysql-root-password}" | base64 --decode)

2. Redis(TM) can be accessed on the following DNS names from within your cluster:

    {{ printf "%s-redis-master.%s.svc.%s" .Release.Name .Release.Namespace .Values.redis.clusterDomain }} for read/write operations (port {{ .Values.redis.master.service.port }})
    {{ printf "%s-redis-replicas.%s.svc.%s" .Release.Name .Release.Namespace .Values.redis.clusterDomain }} for read-only operations (port {{ .Values.redis.replica.service.port }})

    {{ if .Values.redis.auth.enabled }}

    To get your password run:

        export REDIS_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ .Release.Name }}-redis -o jsonpath="{.data.redis-password}" | base64 --decode)

    {{- end }}

3. Elasticsearch can be accessed on the following DNS names from within your cluster:
    {{ printf "elasticsearch-master.%s.svc.cluster.local" .Release.Namespace }} for read-only operations (port {{ .Values.elasticsearch.httpPort }})
     Watch all cluster members come up: kubectl get pods --namespace={{ .Release.Namespace }} -l app=elasticsearch-master -w
